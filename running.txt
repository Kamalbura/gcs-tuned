# ==============================================================================
# running.txt
#
# Instructions for Testing the GCS/Drone Cryptographic Framework
#
# This guide provides two methods to test the framework:
#   1. Manual Testing: Using multiple terminals for clear, separate logs.
#   2. Automated Testing: Using a batch script to launch all components.
#
# PREPARATION:
#   1. Open a terminal (PowerShell or Command Prompt).
#   2. Navigate to the 'gcs' directory:
#      cd gcs
#   3. Activate your conda environment:
#      conda activate gcs-env
#   4. Install dependencies:
#      pip install -r requirements.txt
#   5. Navigate to the 'drone' directory:
#      cd ../drone
#   6. Install dependencies:
#      pip install -r requirements.txt
#   7. Return to the root directory:
#      cd ..
#
# ==============================================================================

# ------------------------------------------------------------------------------
# METHOD 1: MANUAL TESTING (Recommended for Debugging)
# ------------------------------------------------------------------------------
# Open three separate terminals, each with the 'gcs-env' activated.

# --- Terminal 1: Start the Crypto Manager ---
# Navigate to the 'gcs' directory and run the manager.
# This process must remain running.
#
# > cd gcs
# > python crypto_manager.py
#
# Expected Output:
# --- CRYPTOGRAPHY MANAGER ---
# âœ… Listening for commands on 127.0.0.1:5900
# ...

# --- Terminal 2: Start a Drone Proxy ---
# Navigate to the 'drone' directory and choose any drone proxy to run.
# For this example, we'll use drone_aes.py (c2).
#
# > cd drone
# > python drone_aes.py
#
# Expected Output:
# --- DRONE AES-256-GCM PROXY ---
# [AES Drone] Listening for plaintext telemetry...
# [AES Drone] Listening for encrypted GCS commands...

# --- Terminal 3: Control the GCS Proxy ---
# Navigate to the 'gcs' directory and use the controller to start the
# matching GCS proxy. Since we started drone_aes.py (c2), we must start
# gcs_aes.py (c2).
#
# > cd gcs
# > python gcs_controller.py switch c2
#
# Expected Output:
# Response from Manager: OK: Switched to c2 (gcs_aes.py)
#
# At this point, the GCS and Drone proxies are communicating.
# You can test other algorithms by stopping the drone proxy (Ctrl+C) and
# running a different one, then using the controller to switch the GCS proxy.
#
# To stop the GCS proxy:
# > python gcs_controller.py stop
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# METHOD 2: AUTOMATED TESTING (For Quick Verification)
# ------------------------------------------------------------------------------
# I will create a batch script named 'run_test.bat' to automate this.
# You can run it from the root directory of the 'gcs-tuned' project.
#
# The script will:
#   1. Start the crypto_manager.py in a new window.
#   2. Start a drone proxy (e.g., drone_kyber_hybrid.py) in another new window.
#   3. Wait a few seconds for them to initialize.
#   4. Run the gcs_controller.py to switch to the matching GCS proxy.
#
# To run the test for Kyber (c6):
# > run_test.bat c6
#
# To run the test for ASCON (c1):
# > run_test.bat c1
# ------------------------------------------------------------------------------
